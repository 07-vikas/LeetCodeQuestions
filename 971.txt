class Solution {
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
        List<Integer> ls = new ArrayList<>();
        List<Integer> idx = new ArrayList<>();
        idx.add( 0);
        fn( root, voyage, idx, ls);

        if( idx.get( 0) != voyage.length)return List.of( -1);// Its a good method ;

        return ls;
    }
    public void fn( TreeNode node, int[] ar, List<Integer> idx, List<Integer> ls){
        if( idx.get( 0) == ar.length )return;

        if( node != null && node.val != ar[idx.get( 0)])return;
        
        if( node.left == null && node.right == null){
            //if( node.val != ar[idx.get( 0)])return;
            idx.set( 0, idx.get( 0)+1);
            return ;
        }


        if( node.left != null && node.right != null){
            if( node.left.val != ar[idx.get( 0)+1]){
                swap( node);
                ls.add( node.val);
            }
            idx.set( 0, idx.get( 0)+1);
            fn( node.left, ar, idx, ls);
            fn( node.right, ar, idx, ls);
        }
        else if( node.left != null){
            if( node.left.val != ar[idx.get( 0)+1]){
                swap( node);
                ls.add( node.val);
                idx.set( 0, idx.get( 0)+1);
                fn( node.right, ar, idx, ls);
            }
            else{
                idx.set( 0, idx.get( 0)+1);
                fn( node.left, ar, idx, ls);
            }
            
        }else if( node.right != null){
            if( node.right.val != ar[idx.get( 0)+1]){
                swap( node);
                ls.add( node.val);
                idx.set( 0, idx.get( 0)+1);
                fn( node.left, ar, idx, ls);
            }else{
                idx.set( 0, idx.get( 0)+1);
                fn( node.right, ar, idx, ls);
            }
            
            
        }

        return;
    }
    private void swap( TreeNode node){
        TreeNode temp = node.left;
        node.left = node.right;
        node.right = temp;

        return;
    }
}