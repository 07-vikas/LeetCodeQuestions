/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean flipEquiv(TreeNode root1, TreeNode root2) {
        return fn( root1, root2);
    }
    public boolean fn( TreeNode node1, TreeNode node2){
        if( node1 == null){
            if( node2 == null)return true;
            else return false;
        }

        if( node2 == null){
            if( node1 == null)return true;
            else return false;
        }

        if( node1.val != node2.val)return false;

        boolean ans = true;

        if( node1.left != null){
            if( node2.left != null && node2.left.val == node1.left.val){
                ans = ans && fn( node1.left, node2.left);
            }else if( node2.right != null && node2.right.val == node1.left.val){
                ans = ans && fn( node1.left, node2.right);
            }
            else return false;
        }
        if( node1.right != null){
            if( node2.left != null && node1.right.val == node2.left.val){
                ans = ans && fn( node1.right, node2.left);
            }else if( node2.right != null && node1.right.val == node2.right.val){
                ans = ans && fn( node1.right, node2.right);
            }
            else return false;
        }

        if( node2.left != null){
            if( node1.left != null && node1.left.val == node2.left.val){
                ans = ans && fn( node2.left, node1.left);
            }else if( node1.right != null && node1.right.val == node2.left.val){
                ans = ans && fn( node2.left, node1.right);
            }
            else return false;
        }
        if( node2.right != null){
            if( node1.left != null && node2.right.val == node1.left.val){
                ans = ans && fn( node2.right, node1.left);
            }else if( node1.right != null && node2.right.val == node1.right.val){
                ans = ans && fn( node2.right, node1.right);
            }
            else return false;
        }

        return ans;
    }
}